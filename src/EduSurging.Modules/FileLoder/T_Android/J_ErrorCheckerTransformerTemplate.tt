<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

package <#=_projectName#>.Base;
import android.content.Context;


import <#=_projectName#>.Common.LoadUtil;

import retrofit2.Response;
import rx.Observable;
import rx.exceptions.Exceptions;
import rx.functions.Func1;

public class ErrorCheckerTransformer<T extends Response<R>, R extends BaseResponse>
        implements Observable.Transformer<T, R> {

    public static final String DEFAULT_ERROR_MESSAGE = "Oh, no";

    private Context mContext;
    private LoadUtil loading;

    public ErrorCheckerTransformer(final Context context, final LoadUtil loading) {
        this.mContext = context;
        this.loading=loading;
    }

    @Override
    public Observable<R> call(Observable<T> observable) {
        return observable.map(new Func1<T, R>() {
            @Override
            public R call(T t) {
                String msg = null;
				if(t.raw().code()==404){
                    msg="该方法未找到。";
                }
                else if (!t.isSuccessful() || t.body() == null) {
                    msg = DEFAULT_ERROR_MESSAGE;
                }
//              else if (t.body().Status == false) {
//                    msg = t.body().Msg;
//                    if (msg == null) {
//                        msg = DEFAULT_ERROR_MESSAGE;
//                    }
//                } else if (t.body().Code != BaseResponse.CODE_SUCCESS) {
//                    msg = t.body().Msg;
//                    if (msg == null) {
//                        msg = DEFAULT_ERROR_MESSAGE;
//                    }
//                }

                if (msg != null) {
                    try {
                        throw new ErrorResponseException(msg);
                    } catch (ErrorResponseException e) {
                        throw Exceptions.propagate(e);
                    }
                }

                return t.body();
            }
        });
    }
}
