<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="FileLoder.Helper" #>
using System.Linq;
using <#=_projectName#>.Model;
using <#=_projectName#>.IDAL.<#=_entityName#>;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Text;
using System.Data;
using System;

namespace <#=_projectName#>.DAL.<#=_entityName#>
{
<# var PKData=_Columns.Where(t=>t.PK==true).FirstOrDefault();
		if(PKData==null) throw new Exception("未包含主键字段");
#>
	/// <summary>
	/// <#=_entityName#>操作接口实现方法
	/// </summary>
	public class <#=_entityName#>DAL:I<#=_entityName#>DAL
	{
<#if(PKData.IsAutoAdd){#>
		/// <summary>
		/// 得到最大ID
		/// </summary>
		public <#=PKData.CodeType#> GetMaxId()
		{
			return DbHelperSQL.GetMaxID("<#=PKData.Code#>", "<#=_entityName#>"); 
		}
<#}#>
		/// <summary>
		/// 是否存在该记录
		/// </summary>
		public bool Exists(<#=PKData.CodeType#> <#=PKData.Code#>)
		{
			StringBuilder strSql=new StringBuilder();
			strSql.Append("select count(1) from <#=_entityName#>");
			strSql.Append(" where <#=PKData.Code#>=@<#=PKData.Code#>");
			SqlParameter[] parameters =
			{
				new SqlParameter("@<#=PKData.Code#>", <#=Helper.getDbType(_options.DataBaseType,PKData.DataType,PKData.Length)#>)
			};
			parameters[0].Value=<#=PKData.Code#>;
			return DbHelperSQL.Exists(strSql.ToString(),parameters);
		}
		public <#=PKData.IsAutoAdd?PKData.CodeType:"bool"#> Add(<#=_entityName#>Model m<#=_entityName.ToLower()#>)
		{
			string flag = "insert into {0} ({1}) values ({2}) <#=PKData.IsAutoAdd?";select @@IDENTITY":""#>";
            StringBuilder Key = new StringBuilder();
            StringBuilder Values = new StringBuilder();
            List<SqlParameter> Para = new List<SqlParameter>();
<# foreach(var item in _Columns.Where(t=>t.PK!=true&&t.Virtual == false)){#>
			if(m<#=_entityName.ToLower()#>.<#=item.Code#>!=null)
			{
				Key.Append(",<#=item.Code#>");
				Values.Append(",@<#=item.Code#>");
				Para.Add(new SqlParameter("@<#=item.Code#>", m<#=_entityName.ToLower()#>.<#=item.Code#>));
			}
<#}#>
			var Sql=string.Format(flag,"<#=_entityName#>",Key.ToString().Substring(1),Values.ToString().Substring(1));
<#if(PKData.IsAutoAdd){#>
			object obj = DbHelperSQL.GetSingle(Sql, Para.ToArray());
            if (obj == null)
                return 1;
            else
<#if(PKData.CodeType=="int"){#>                
				return Convert.ToInt32(obj);
<#}else if(PKData.CodeType=="long"){#>
				return Convert.ToInt64(obj);
<#}}else{#>
			return DbHelperSQL.ExecuteSql(Sql,parameters)>0;
<#}#>
		}
		
		public bool Update(<#=_entityName#>Model m<#=_entityName.ToLower()#>)
		{
			StringBuilder Key = new StringBuilder();
            List<SqlParameter> Para = new List<SqlParameter>();
            var flag="update <#=_entityName#> set ";
<# var str="";foreach(var item in _Columns.Where(t=>t.Virtual == false)){#>
			if(m<#=_entityName.ToLower()#>.<#=item.Code#>!=null)
			{
<# if(item.PK) {
				str=" where "+item.Code+"=@"+item.Code;
#>
				Para.Add(new SqlParameter("@<#=item.Code#>", m<#=_entityName.ToLower()#>.<#=item.Code#>));
<#}else{#>
				Key.Append(string.Format(",<#=item.Code#>=@<#=item.Code#>"));
				Para.Add(new SqlParameter("@<#=item.Code#>", m<#=_entityName.ToLower()#>.<#=item.Code#>));
<#}#>
			}
<#}#>
			Key.Append("<#=str#>");
            return DbHelperSQL.ExecuteSql(flag+Key.ToString().Substring(1), Para.ToArray())>0;
		}

		public bool Delete(<#=PKData.CodeType#> <#=PKData.Code#>)
		{
			StringBuilder strSql = new StringBuilder();
            strSql.Append("delete from <#=_entityName#> ");
			strSql.Append(" where <#=PKData.Code#>=@<#=PKData.Code#> ");
			SqlParameter[] parameters =
			{
				new SqlParameter("@<#=PKData.Code#>", <#=Helper.getDbType(_options.DataBaseType,PKData.DataType,PKData.Length)#>)
			};
			parameters[0].Value=<#=PKData.Code#>;
            return DbHelperSQL.ExecuteSql(strSql.ToString(), parameters)>0;
		}
		public bool Delete(string Where=null, List<SqlParameter> para = null)
		{
			string Sql="delete from <#=_entityName#> ";
			if(Where!=null&&Where.Trim()!="")
			{
				Sql+=" where "+Where;
			}
			return (para==null?DbHelperSQL.ExecuteSql(Sql):DbHelperSQL.ExecuteSql(Sql,para.ToArray()))>0;
		}
		public <#=_entityName#>Model GetModel(<#=PKData.CodeType#> <#=PKData.Code#>)
		{
			StringBuilder strSql = new StringBuilder();
			List<SqlParameter> Para = new List<SqlParameter>();
            strSql.Append("select <#=string.Join(",",_Columns.Where(t=>t.Virtual == false).Select(r=>r.Code))#> from <#=_entityName#> ");
			strSql.Append(" where <#=PKData.Code#>=@<#=PKData.Code#> ");
			Para.Add(new SqlParameter("@<#=PKData.Code#>", <#=PKData.Code#>));
            DataSet ds= DbHelperSQL.Query(strSql.ToString(), Para.ToArray());
			if (ds.Tables.Count > 0&&ds.Tables[0].Rows.Count > 0)
				return RowToModel(ds.Tables[0].Rows[0]);
			return null;
		}
		public <#=_entityName#>Model RowToModel(DataRow row)
		{
			<#=_entityName#>Model m<#=_entityName#>Model=new <#=_entityName#>Model();
<# foreach(var item in _Columns.Where(t=>t.Virtual == false)){if(item.CodeType=="string"){#>
			if(row["<#=item.Code#>"]!=null)
				m<#=_entityName#>Model.<#=item.Code#>=row["<#=item.Code#>"].ToString();
<#}else{#>
			if(row["<#=item.Code#>"]!=null&&row["<#=item.Code#>"].ToString().Trim()!="")
				m<#=_entityName#>Model.<#=item.Code#>=<#=item.CodeType.Replace("?","")#>.Parse(row["<#=item.Code#>"].ToString());
<#}}#>
			return m<#=_entityName#>Model;
		}

		public DataSet GetList(string Where=null, List<SqlParameter> para = null)
		{
			string Sql="select <#=string.Join(",",_Columns.Where(t=>t.Virtual == false).Select(r=>r.Code))#> from <#=_entityName#> ";
			if(Where!=null&&Where.Trim()!="")
			{
				Sql+=" where "+Where;
			}
			return para==null?DbHelperSQL.Query(Sql):DbHelperSQL.Query(Sql,para.ToArray());
		}
		/// <summary>
		/// 获得前几行数据
		/// </summary>
        public DataSet GetList(int Top, string strWhere, string filedOrder, List<SqlParameter> para = null)
		{
			StringBuilder strSql=new StringBuilder();
			strSql.Append("select ");
			if(Top>0)
			{
				strSql.Append(" top "+Top.ToString());
			}
			strSql.Append(" <#=string.Join(",",_Columns.Where(t=>t.Virtual == false).Select(r=>r.Code))#> ");
			strSql.Append(" FROM <#=_entityName#> ");
			if(strWhere.Trim()!="")
			{
				strSql.Append(" where "+strWhere);
			}
			strSql.Append(" order by " + filedOrder);
            return para == null ? DbHelperSQL.Query(strSql.ToString()) : DbHelperSQL.Query(strSql.ToString(),para.ToArray());
		}
		public int GetRecordCount(string strWhere=null, List<SqlParameter> para = null)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select count(1) FROM <#=_entityName#> ");
            if (strWhere!=null&&strWhere.Trim()!="")
            {
                strSql.Append(" where " + strWhere);
            }
            object obj =para==null? DbHelperSQL.GetSingle(strSql.ToString()):DbHelperSQL.GetSingle(strSql.ToString(),para.ToArray());
            if (obj == null)
                return 0;
            else
                return Convert.ToInt32(obj);
        }

		public List<<#=_entityName#>Model> GetModelList(string Where=null, List<SqlParameter> para = null)
		{
			List<<#=_entityName#>Model> m<#=_entityName#>Model=new List<<#=_entityName#>Model>();
			var ds=GetList(Where,para);
			if (ds.Tables.Count > 0&&ds.Tables.Count > 0)
			{
				foreach(DataRow row in ds.Tables[0].Rows)
				{
					m<#=_entityName#>Model.Add(RowToModel(row));
				}
			}
			return m<#=_entityName#>Model;
		}
		/// <summary>
		/// 分页获取数据列表
		/// </summary>
        public DataSet GetListByPage(string strWhere, string orderby, int startIndex, int endIndex, List<SqlParameter> para = null)
		{
			StringBuilder strSql=new StringBuilder();
			strSql.Append("SELECT * FROM ( ");
			strSql.Append(" SELECT ROW_NUMBER() OVER (");
			if (!string.IsNullOrEmpty(orderby.Trim()))
			{
				strSql.Append("order by T." + orderby );
			}
			else
			{
				strSql.Append("order by T.<#=PKData.Code#> desc");
			}
			strSql.Append(")AS Row, T.*  from <#=_entityName#> T ");
			if (!string.IsNullOrEmpty(strWhere.Trim()))
			{
				strSql.Append(" WHERE " + strWhere);
			}
			strSql.Append(" ) TT");
			strSql.AppendFormat(" WHERE TT.Row between {0} and {1}", startIndex, endIndex);
            return para == null ? DbHelperSQL.Query(strSql.ToString()) : DbHelperSQL.Query(strSql.ToString(), para.ToArray());
		}
	}
}