// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 16.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace FileLoder.T_DotnetCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using FileLoder.TemplateModel;
    using FileLoder.Helper;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class CoreConfigurationTemplate : CoreConfigurationTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nusing System.Data.Entity.Migrations;\r\nusing Edu.Data.EntityFramework.Migrations" +
                    ";\r\n\r\n");
            
            #line 12 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
if(_dataBaseType==DataBaseType.MySql){
            
            #line default
            #line hidden
            this.Write("using Edu.Data.EntityFramework.Migrations.MySql;\r\nusing MySql.Data.Entity;\r\n");
            
            #line 15 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\nnamespace ");
            
            #line 17 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_projectName));
            
            #line default
            #line hidden
            this.Write(".Base\r\n{\r\n    public class ");
            
            #line 19 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_projectName));
            
            #line default
            #line hidden
            this.Write("Configuration : DbMigrationsConfiguration<");
            
            #line 19 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_projectName));
            
            #line default
            #line hidden
            this.Write("DbContext>\r\n    {\r\n        public ");
            
            #line 21 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_projectName));
            
            #line default
            #line hidden
            this.Write("Configuration()\r\n        {\r\n\t\t");
            
            #line 23 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
if(_dataBaseType==DataBaseType.MySql){
            
            #line default
            #line hidden
            this.Write("\t\t\tSetSqlGenerator(\"MySql.Data.MySqlClient\", new MyCustomMigrationSQLGenerator())" +
                    ";\r\n            SetHistoryContextFactory(\"MySql.Data.MySqlClient\", (conn, schema)" +
                    " => new MyCustomHistoryContext(conn, schema));\r\n\t\t");
            
            #line 26 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("            AutomaticMigrationsEnabled = true;\r\n            AutomaticMigrationDat" +
                    "aLossAllowed = true;  //如果数据迁移时会发生数据丢失，false则抛出异常，true不抛出异常\r\n        }\r\n");
            
            #line 30 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
if(_pro){
            
            #line default
            #line hidden
            this.Write("//判断存储过程是否存在,不存在就删除\r\n\t\tprotected void DropDropProcByName(");
            
            #line 32 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_projectName));
            
            #line default
            #line hidden
            this.Write(@"DbContext context,string ProcedureName)
		{
			string DropProc = ""if exists (select * from dbo.sysobjects where id = object_id(N'[{0}]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) begin DROP PROCEDURE [{0}] end"";
			var str = string.Format(DropProc, ProcedureName);
			context.Database.ExecuteSqlCommand(str);
		}
		//判断方法是否存在,不存在就删除
		protected void DropFunctionByName(");
            
            #line 39 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_projectName));
            
            #line default
            #line hidden
            this.Write(@"DbContext context, string FunctionName)
		{
			string DropFunc = ""if exists (select * from dbo.sysobjects where id = object_id(N'[{0}]') and xtype in (N'FN', N'IF', N'TF')) begin DROP FUNCTION  [{0}] end"";
			var str = string.Format(DropFunc, FunctionName);
			context.Database.ExecuteSqlCommand(str);
		}
		protected override void Seed(");
            
            #line 45 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_projectName));
            
            #line default
            #line hidden
            this.Write("DbContext context)\r\n        {\r\n\t\t\t\r\n\t\t\t\r\n            //初始化数据或创建存储过程以及数据库方法\r\n");
            
            #line 50 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
 foreach (var item in _models)
            {
                var PROName = item.Code + "_Pro" + "_Search";
                var FuncName = item.Code + "_Func" + "_Search";
				var Store=Helper.GetStoredPro(item);

            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\t\tDropDropProcByName(context, \"");
            
            #line 57 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PROName));
            
            #line default
            #line hidden
            this.Write("\");\r\n\t\t\tDropFunctionByName(context,\"");
            
            #line 58 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FuncName));
            
            #line default
            #line hidden
            this.Write("\");\r\n\t\t\tvar ");
            
            #line 59 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Code));
            
            #line default
            #line hidden
            this.Write("SqlS=\"");
            
            #line 59 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Store[0]));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\tvar ");
            
            #line 60 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Code));
            
            #line default
            #line hidden
            this.Write("SqlF=\"");
            
            #line 60 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Store[1]));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\tcontext.Database.ExecuteSqlCommand(");
            
            #line 61 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Code));
            
            #line default
            #line hidden
            this.Write(@"SqlS.Replace("" IF "",""\r\t IF "").Replace("" ELSE "",""\r\t  ELSE "").Replace("" begin "",""\r\t begin \r\t"").Replace("" and "",""\r\t and "").Replace("" where "",""\r\t where "").Replace("" order by "",""\r\t order by \r\t"").Replace("","","", \r\t""));
			context.Database.ExecuteSqlCommand(");
            
            #line 62 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Code));
            
            #line default
            #line hidden
            this.Write("SqlF.Replace(\" IF \",\"\\r\\t IF \").Replace(\" ELSE \",\"\\r\\t  ELSE \").Replace(\" begin \"" +
                    ",\"\\r\\t begin \\r\\t\").Replace(\" and \",\"\\r\\t and \").Replace(\" where \",\"\\r\\t where \"" +
                    ").Replace(\" order by \",\"\\r\\t order by \\r\\t\").Replace(\",\",\", \\r\\t\"));\r\n          " +
                    "  \r\n");
            
            #line 64 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\tbase.Seed(context);\r\n        }\r\n");
            
            #line 67 "E:\JiTuan_Project\TepCloud\DotNetCode\Current\FileLoder\T_DotnetCore\CoreConfigurationTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class CoreConfigurationTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
