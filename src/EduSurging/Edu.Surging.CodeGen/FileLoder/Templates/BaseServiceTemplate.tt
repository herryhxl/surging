<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="FileLoder.TemplateModel" #>
<#@ import namespace="FileLoder.Helper" #>

<# var orderNames = new List<string>(); #>
using System.Linq.Expressions;
using System.Threading.Tasks;
using System;
using System.Data.Entity;
using System.Linq;
using Edu.Core.Data;
using <#=_projectName#>.Entity;
using <#=_projectName#>.Base;
using <#=_projectName#>.Models;
using System.Collections.Generic;
using Edu.Core.Handler;
using Newtonsoft.Json;
using System.Data.Entity.Core.Objects;
using Edu.Core.Site;
using Edu.Core.Extend;
using Edu.Core.Model;
using System.Data;

<# var PKData=models.ColumnsList.Where(t=>t.PK==true).FirstOrDefault();
	if(PKData==null) throw new Exception("未包含主键字段");
	var IsFK=PKData.FK;
#>

namespace <#=_projectName#>.BaseService
{
	public class <#=_entityName#>BaseService : I<#=_entityName#>BaseService
	{
		private readonly <#=_repositoryText#><<#=_entityName#>Entity> _<#=_entityName.ToLower()#>Repository;
        private readonly IWorkContext _workContext;
        private readonly IValidateCode _validateCode;

		public <#=_entityName#>BaseService(<#=_repositoryText#><<#=_entityName#>Entity> <#=_entityName.ToLower()#>Repository, IWorkContext workContext,IValidateCode validateCode)
		{
			_<#=_entityName.ToLower()#>Repository = <#=_entityName.ToLower()#>Repository;
			_workContext=workContext;
            _validateCode = validateCode;
		}

		private IQueryable<<#=_entityName#>Entity> DataPermissionsVaild(IQueryable<<#=_entityName#>Entity> query, MenuFieldInfo FieldInfo)
        {
			#region 动态获取数据权限
			FieldInfo.FieldInfo.ForEach(item =>
            {
				switch(item.FieldName)
				{
<# foreach(var model in _sModels.Where(r=>r.Virtual==false)){ #>
				case "<#=model.Code#>":
				var <#=model.Code#>Field = FieldInfo.getSelectDataField("<#=model.Code#>");
				if (<#=model.Code#>Field != null)
				{
<#if(model.CodeType.StartsWith("int")){#>
					if (<#=model.Code#>Field.DataType == MenuAuth_DataType.用户编号)
					{
<# if(model.EM){#>
					
<#}else{#>
						if(<#=model.Code#>Field.Reverse)
							query = query.Where(q => q.<#=model.Code#> != (int)_workContext.CurrentUser.Id);
						else
							query = query.Where(q => q.<#=model.Code#> == (int)_workContext.CurrentUser.Id);
<#}#>
					}
					else if (<#=model.Code#>Field.DataType == MenuAuth_DataType.机构编号)
					{
<# if(model.EM){#>

<#}else{#>
						if(<#=model.Code#>Field.Reverse)
							query = query.Where(q => q.<#=model.Code#> != _workContext.SuperRole.Org);
						else 
							query = query.Where(q => q.<#=model.Code#> == _workContext.SuperRole.Org);
<#}#>
					}
					else if (<#=model.Code#>Field.DataType == MenuAuth_DataType.授权编号)
					{
<# if(model.EM){#>
					
<#}else{#>
						if(<#=model.Code#>Field.Reverse)
							query = query.Where(q => q.<#=model.Code#> != _workContext.SuperRole.Id);
						else 
							query = query.Where(q => q.<#=model.Code#> == _workContext.SuperRole.Id);
<#}#>
					}
					else if (<#=model.Code#>Field.DataType == MenuAuth_DataType.角色编号)
					{
<# if(model.EM){#>
					
<#}else{#>
						if(<#=model.Code#>Field.Reverse)
							query = query.Where(q => q.<#=model.Code#> != _workContext.UserRole.RoleID);
						else
							query = query.Where(q => q.<#=model.Code#> == _workContext.UserRole.RoleID);
<#}#>
					}
					else if (<#=model.Code#>Field.DataType == MenuAuth_DataType.区域编号)
					{
<# if(model.EM){#>
					
<#}else{#>
						if(<#=model.Code#>Field.Reverse)
							query = query.Where(q => q.<#=model.Code#> != _workContext.AreaInfo.Id);
						else
							query = query.Where(q => q.<#=model.Code#> == _workContext.AreaInfo.Id);
<#}#>
					}
					
					else if (<#=model.Code#>Field.DataType == MenuAuth_DataType.班级编号)
					{
<# if(model.EM){#>
					
<#}else{#>
						if(<#=model.Code#>Field.Reverse)
							query = query.Where(q => q.<#=model.Code#> != _workContext.ClassInfo.OrgID);
						else
							query = query.Where(q => q.<#=model.Code#> == _workContext.ClassInfo.OrgID);
<#}#>
					}
					
					else if (<#=model.Code#>Field.DataType == MenuAuth_DataType.学段年级关联编号)
					{
<# if(model.EM){#>
					
<#}else{#>
						if(<#=model.Code#>Field.Reverse)
							query = query.Where(q => q.<#=model.Code#> != _workContext.LinkInfo.Id);
						else
							query = query.Where(q => q.<#=model.Code#> == _workContext.LinkInfo.Id);
<#}#>
					}
					else if (<#=model.Code#>Field.DataType == MenuAuth_DataType.学段编号)
					{
<# if(model.EM){#>
					
<#}else{#>
						if(<#=model.Code#>Field.Reverse)
							query = query.Where(q => q.<#=model.Code#> != _workContext.LinkInfo.Key);
						else
							query = query.Where(q => q.<#=model.Code#> == _workContext.LinkInfo.Key);
<#}#>
					}
					else if (<#=model.Code#>Field.DataType == MenuAuth_DataType.年级编号)
					{
<# if(model.EM){#>
					
<#}else{#>
						if(<#=model.Code#>Field.Reverse)
							query = query.Where(q => q.<#=model.Code#> != _workContext.LinkInfo.Value);
						else
							query = query.Where(q => q.<#=model.Code#> == _workContext.LinkInfo.Value);
<#}#>
					}
					else if(<#=model.Code#>Field.DataType==MenuAuth_DataType.下属机构)
					{
<# if(model.EM){#>

<#}else{ #>
						query=from s in query
							  join org in _workContext.LowerList
							  on s.<#=model.Code#> equals org
							  select s;
<#}#>			
					}
					else if(<#=model.Code#>Field.DataType==MenuAuth_DataType.当前机构和下属机构)
					{
<# if(model.EM){#>

<#}else{ #>
						query=from s in query
							  join org in _workContext.OrgList
							  on s.<#=model.Code#> equals org
							  select s;
<#}#>			
					}
					else if(<#=model.Code#>Field.DataType==MenuAuth_DataType.机构教学点编号数组)
					{
<# if(model.EM){#>

<#}else{ #>
						query=from s in query
							  join org in _workContext.TeachPointList
							  on s.<#=model.Code#> equals org
							  select s;
<#}#>			
					}
					else if(<#=model.Code#>Field.DataType==MenuAuth_DataType.机构班级编号数组)
					{
<# if(model.EM){#>

<#}else{ #>
						query=from s in query
							  join org in _workContext.ClassList
							  on s.<#=model.Code#> equals org
							  select s;
<#}#>			
					}
					else if (<#=model.Code#>Field.DataType == MenuAuth_DataType.数字数组)
					{
						var <#=model.Code#>Data = <#=model.Code#>Field.DataValue.ToIntList();
<# if(model.EM){#>
						if (<#=model.Code#>Data.Any())
						{
							var Ex<#=model.Code#>Data= <#=model.Code#>Field.Xml_EList.Select(t=>t.Attribute).Intersect(<#=model.Code#>Data);
							if(<#=model.Code#>Field.Reverse)
								query = query.Where(q => Ex<#=model.Code#>Data.Contains((int)q.<#=model.Code#>)==false);
							else
								query = query.Where(q => Ex<#=model.Code#>Data.Contains((int)q.<#=model.Code#>));
						}
<#}else{#>
						if (<#=model.Code#>Data.Any())
						{
							if(<#=model.Code#>Field.Reverse)
								query = query.Where(q => <#=model.Code#>Data.Contains((int)q.<#=model.Code#>));
							else
								query = query.Where(q => <#=model.Code#>Data.Contains((int)q.<#=model.Code#>)==false);
						}
<#}#>
					}
					else if (<#=model.Code#>Field.DataType == MenuAuth_DataType.自动匹配)
					{
						var Value=<#=model.Code#>Field.DataValue.getValue<#=model.CodeType.Replace("?","")#>();
<# if(model.EM){#>
						if(<#=model.Code#>Field.Reverse)
							query = query.Where(q => q.<#=model.Code#>!= (<#=model.EnumName#>)Value);
						else
							query = query.Where(q => q.<#=model.Code#>== (<#=model.EnumName#>)Value);
<#}else{#>
						if(<#=model.Code#>Field.Reverse)
							query = query.Where(q => q.<#=model.Code#>!=Value);
						else
							query = query.Where(q => q.<#=model.Code#>==Value);
<#}#>
					}
					}
					break;
<#}else{#>
						if (<#=model.Code#>Field.DataType == MenuAuth_DataType.自动匹配)
						{
							
							if(<#=model.Code#>Field.Reverse)
							{
<#if(model.CodeType=="string"){#>
									query = query.Where(q => q.<#=model.Code#>!= <#=model.Code#>Field.DataValue);
<#}else{#>
									var Value=<#=model.Code#>Field.DataValue.getValue<#=model.CodeType.Replace("?","")#>();
									query = query.Where(q => q.<#=model.Code#>!= Value);
<#}#>
							}
							else
							{
<#if(model.CodeType=="string"){#>
									query = query.Where(q => q.<#=model.Code#>== <#=model.Code#>Field.DataValue);
<#}else{#>
									var Value=<#=model.Code#>Field.DataValue.getValue<#=model.CodeType.Replace("?","")#>();
									query = query.Where(q => q.<#=model.Code#>==Value);
<#}#>
							}
						}
						else if(<#=model.Code#>Field.DataType == MenuAuth_DataType.机构层级编码)
						{
							<#if(model.CodeType=="string"){#>
								if(<#=model.Code#>Field.Reverse)
								{
									query = query.Where(q => q.<#=model.Code#>!=_workContext.OrgInfo.LevelCode);
								}
								else
								{
									query = query.Where(q => q.<#=model.Code#>==_workContext.OrgInfo.LevelCode);
								}
							<#}#>
						}
						else if(<#=model.Code#>Field.DataType == MenuAuth_DataType.机构区域编码)
						{
							<#if(model.CodeType=="string"){#>
								if(<#=model.Code#>Field.Reverse)
								{
									query = query.Where(q => q.<#=model.Code#>!=_workContext.AreaInfo.Code);
								}
								else
								{
									query = query.Where(q => q.<#=model.Code#>==_workContext.AreaInfo.Code);
								}
							<#}#>
						}
						else if(<#=model.Code#>Field.DataType == MenuAuth_DataType.下属机构)
						{
							<#if(model.CodeType=="string"){#>
                                var Code = _workContext.AreaInfo.Code.CodeStart();
								if(<#=model.Code#>Field.Reverse)
								{
									query = query.Where(q => q.<#=model.Code#>.StartsWith(Code)==false&&q.<#=model.Code#>!= _workContext.AreaInfo.Code);
								}
								else
								{
									query = query.Where(q => q.<#=model.Code#>.StartsWith(Code)&&q.<#=model.Code#>!= _workContext.AreaInfo.Code);
								}
							<#}#>
						}
						else if(<#=model.Code#>Field.DataType == MenuAuth_DataType.当前机构和下属机构)
						{
							<#if(model.CodeType=="string"){#>
                                var Code = _workContext.AreaInfo.Code.CodeStart();
								if(<#=model.Code#>Field.Reverse)
								{
									query = query.Where(q => q.<#=model.Code#>.StartsWith(Code)==false);
								}
								else
								{
									query = query.Where(q => q.<#=model.Code#>.StartsWith(Code));
								}
							<#}#>
						}
					}
					break;
<#}#>			
<#}#>	
				}
			});
			#endregion
            return query;
        }

		public IQueryable<<#=_entityName#>Entity> Where(Expression<Func<<#=_entityName#>Entity, bool>> expression=null,IQueryable<<#=_entityName#>Entity> Query=null,bool IsAuth=false, MenuFieldInfo FieldInfo=null)
		{
			if(Query==null)
				Query=_<#=_entityName.ToLower()#>Repository.Where(expression);
			else
				Query=expression==null?Query:Query.Where(expression);
			if (IsAuth&&FieldInfo!=null)
                Query = DataPermissionsVaild(Query, FieldInfo);
			return Query;
		}
		
		public IQueryable<<#=_entityName#>Entity> SearchByCondition(<#=_entityName#>SearchCondition condition,Expression<Func<<#=_entityName#>Entity, bool>> expression=null,IQueryable<<#=_entityName#>Entity> Query=null,bool IsAuth=false, MenuFieldInfo FieldInfo=null)
		{
			var query = Where(expression,Query,IsAuth,FieldInfo);
			#region 一级数据动态字段查询
			if(condition!=null)
			{
<# foreach(var model in _sModels.Where(r=>r.Virtual==false).OrderByDescending(c => c.Search)){ 
if(model.Search == EnumSearchType.Range){#>
				if (condition.<#=model.Code#>Begin.HasValue&& (!IsAuth||IsAuth&&FieldInfo!=null&&FieldInfo.IsSearch("<#=model.Code#>")))
				{
					<#if(model.CodeType.StartsWith("DateTime")){#>
					var <#=model.Code#>Begin=condition.<#=model.Code#>Begin.Begin();
					query = query.Where(q => q.<#=model.Code#>>= <#=model.Code#>Begin);
					<#}else{#>
						query = query.Where(q => q.<#=model.Code#>>= condition.<#=model.Code#>Begin);
					<#}#>
				}
				if (condition.<#=model.Code#>End.HasValue&& (!IsAuth||IsAuth&&FieldInfo!=null&&FieldInfo.IsSearch("<#=model.Code#>")))
				{
					<#if(model.CodeType.StartsWith("DateTime")){#>
						var <#=model.Code#>End=condition.<#=model.Code#>End.End();
						query = query.Where(q => q.<#=model.Code#> <= <#=model.Code#>End);
					<#}else{#>
						query = query.Where(q => q.<#=model.Code#>>= condition.<#=model.Code#>End);
					<#}#>
				}
<# }else if(model.Search == EnumSearchType.Equal){
	if(model.CodeType =="string"){#>
				if (!string.IsNullOrEmpty(condition.<#=model.Code#>)&& (!IsAuth||IsAuth&&FieldInfo!=null&&FieldInfo.IsSearch("<#=model.Code#>")))
					query = query.Where(q => q.<#=model.Code#> == condition.<#=model.Code#>);
	<#} else if(model.CodeType =="Guid"){#>
				if (condition.<#=model.Code#>!=Guid.Empty&& (!IsAuth||IsAuth&&FieldInfo!=null&&FieldInfo.IsSearch("<#=model.Code#>")))
					query = query.Where(q => q.<#=model.Code#> == condition.<#=model.Code#>);
	<#}else{#>
				if (condition.<#=model.Code#>.HasValue&& (!IsAuth||IsAuth&&FieldInfo!=null&&FieldInfo.IsSearch("<#=model.Code#>")))
					query = query.Where(q => <#=(model.EM==true?"(int)":"")#>q.<#=model.Code#> == condition.<#=model.Code#>.Value);
	<# }
} else if(model.Search == EnumSearchType.Like){
			if(model.CodeType =="string"){#>
				if (!string.IsNullOrEmpty(condition.<#=model.Code#>)&& (!IsAuth||IsAuth&&FieldInfo!=null&&FieldInfo.IsSearch("<#=model.Code#>")))
					query = query.Where(q => q.<#=model.Code#>.Contains(condition.<#=model.Code#>));
			<#}else{#>
				if (condition.<#=model.Code#>.HasValue&& (!IsAuth||IsAuth&&FieldInfo!=null&&FieldInfo.IsSearch("<#=model.Code#>")))
					query = query.Where(q => q.<#=model.Code#>.Contains(condition.<#=model.Code#>.Value));
<#}} else if(model.Search == EnumSearchType.In){#>
				if (condition.<#=model.Code#>s != null && condition.<#=model.Code#>s.Any()&& (!IsAuth||IsAuth&&FieldInfo!=null&&FieldInfo.IsSearch("<#=model.Code#>")))
<#if(model.IsNull){#>
					query = query.Where(q =>q.<#=model.Code#>!=null&&condition.<#=model.Code#>s.Contains((int)q.<#=model.Code#>));
<#}else{#>
					query = query.Where(q => condition.<#=model.Code#>s.Contains(q.<#=model.Code#>));
<#}}}#>
			}
			#endregion

			#region 二级数据动态字段查询
<# foreach (var model in models.ColumnsList.Where(t => t.Virtual == false||(t.Virtual&&t.PK&&t.FK))){if(model.Virtual){
	var FCode=model.Code; var FkCode=model.Code.Split('_')[1];
   var FKEntity=_AllModels.Where(t=>t.Code==FkCode).FirstOrDefault();
if(FKEntity!=null){ 
#>
			var <#=FCode#>condition=condition.<#=model.Code#>Condition;
			var <#=FCode#>FieldInfo=IsAuth?FieldInfo.GetFieldInfoByChild("<#=model.Code#>"):null;
			if(<#=FCode#>condition!=null)
			{
				//query=query.Where(q=>q.<#=model.Code#>!=null);
<# foreach(var model2 in FKEntity.ColumnsList.Where(r=>r.Virtual==false).OrderByDescending(c => c.Search)){ 
var queryCode=model.Code+"."+model2.Code;
if(model2.Search == EnumSearchType.Range){#>
			if (<#=FCode#>condition.<#=model2.Code#>Begin.HasValue&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
			{
				<#if(model2.CodeType.StartsWith("DateTime")){#>
				var <#=model2.Code#>Begin=<#=FCode#>condition.<#=model2.Code#>Begin.Begin();
                query = query.Where(q => q.<#=queryCode#> >= <#=model2.Code#>Begin);
				<#}else{#>
					query = query.Where(q => q.<#=queryCode#> >= <#=FCode#>condition.<#=model2.Code#>Begin);
				<#}#>
			}
            if (<#=FCode#>condition.<#=model2.Code#>End.HasValue&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
			{
				<#if(model2.CodeType.StartsWith("DateTime")){#>
					var <#=model2.Code#>End=<#=FCode#>condition.<#=model2.Code#>End.End();
					query = query.Where(q => q.<#=queryCode#> <= <#=model2.Code#>End);
				<#}else{#>
					query = query.Where(q => q.<#=queryCode#> >= <#=FCode#>condition.<#=model2.Code#>End);
				<#}#>
			}
<# }else if(model2.Search == EnumSearchType.Equal){
	if(model2.CodeType =="string"){#>
			if (!string.IsNullOrEmpty(<#=FCode#>condition.<#=model2.Code#>)&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
                query = query.Where(q => q.<#=queryCode#> == <#=FCode#>condition.<#=model2.Code#>);
	<#} else if(model2.CodeType =="Guid"){#>
			if (<#=FCode#>condition.<#=model.Code#>.<#=model2.Code#>!=Guid.Empty&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
                query = query.Where(q => q.<#=model.Code#>.<#=model2.Code#> == <#=FCode#>condition.<#=model2.Code#>);
	<#}else{#>
			if (<#=FCode#>condition.<#=model2.Code#>.HasValue&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
                query = query.Where(q => <#=(model2.EM==true?"(int)":"")#>q.<#=queryCode#> == <#=FCode#>condition.<#=model2.Code#>.Value);
	<# }
} else if(model2.Search == EnumSearchType.Like){
		if(model2.CodeType =="string"){#>
			if (!string.IsNullOrEmpty(<#=FCode#>condition.<#=model2.Code#>)&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
                query = query.Where(q => q.<#=queryCode#>.Contains(<#=FCode#>condition.<#=model2.Code#>));
		<#}else{#>
			if (<#=FCode#>condition.<#=model2.Code#>.HasValue&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
                query = query.Where(q => q.<#=queryCode#>.Contains(condition.<#=model2.Code#>.Value));
<#}} else if(model2.Search == EnumSearchType.In){#>
			if (<#=FCode#>condition.<#=model2.Code#>s != null && <#=FCode#>condition.<#=model2.Code#>s.Any()&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
<#if(model2.IsNull){#>
                query = query.Where(q =>q.<#=queryCode#>!=null&&<#=FCode#>condition.<#=model2.Code#>s.Contains((int)q.<#=queryCode#>));
<#}else{#>
				query = query.Where(q => <#=FCode#>condition.<#=model2.Code#>s.Contains(q.<#=queryCode#>));
<#}}}#>

<#}#>

			}
<#}else{#>
<#if(model.FK&&!model.PK){var FCode=model.Code; var FkCode=model.FKTable.Replace("Entity", "");
var FKEntity=_AllModels.Where(t=>t.Code==FkCode).FirstOrDefault();if(FKEntity!=null){#>
				
					var <#=FCode#>condition=condition.<#=model.Code#>Condition;
					var <#=FCode#>FieldInfo=IsAuth?FieldInfo.GetFieldInfoByChild("<#=model.Code#>"):null;
					if(<#=FCode#>condition!=null)
					{
						//query=query.Where(q=>q.<#=model.Code+"_"+model.FKTable.Replace("Entity", "")#>!=null);
<# foreach(var model2 in FKEntity.ColumnsList.Where(r=>r.Virtual==false).OrderByDescending(c => c.Search)){ 
var queryCode=model.Code+"_"+model.FKTable.Replace("Entity", "")+"."+model2.Code;
if(model2.Search == EnumSearchType.Range){#>
			if (<#=FCode#>condition.<#=model2.Code#>Begin.HasValue&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
			{
				<#if(model2.CodeType.StartsWith("DateTime")){#>
				var <#=model2.Code#>Begin=<#=FCode#>condition.<#=model2.Code#>Begin.Begin();
                query = query.Where(q => q.<#=queryCode#> >= <#=model2.Code#>Begin);
				<#}else{#>
					query = query.Where(q => q.<#=queryCode#> >= <#=FCode#>condition.<#=model2.Code#>Begin);
				<#}#>
			}
            if (<#=FCode#>condition.<#=model2.Code#>End.HasValue&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
			{
				<#if(model2.CodeType.StartsWith("DateTime")){#>
					var <#=model2.Code#>End=<#=FCode#>condition.<#=model2.Code#>End.End();
					query = query.Where(q => q.<#=queryCode#> <= <#=model2.Code#>End);
				<#}else{#>
					query = query.Where(q => q.<#=queryCode#> >= <#=FCode#>condition.<#=model2.Code#>End);
				<#}#>
			}
<# }else if(model2.Search == EnumSearchType.Equal){
	if(model2.CodeType =="string"){#>
			if (!string.IsNullOrEmpty(<#=FCode#>condition.<#=model2.Code#>)&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
                query = query.Where(q => q.<#=queryCode#> == <#=FCode#>condition.<#=model2.Code#>);
	<#} else if(model2.CodeType =="Guid"){#>
			if (<#=FCode#>condition.<#=model.Code#>.<#=model2.Code#>!=Guid.Empty&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
                query = query.Where(q => q.<#=model.Code#>.<#=model2.Code#> == <#=FCode#>condition.<#=model2.Code#>);
	<#}else{#>
			if (<#=FCode#>condition.<#=model2.Code#>.HasValue&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
                query = query.Where(q => <#=(model2.EM==true?"(int)":"")#>q.<#=queryCode#> == <#=FCode#>condition.<#=model2.Code#>.Value);
	<# }
} else if(model2.Search == EnumSearchType.Like){
		if(model2.CodeType =="string"){#>
			if (!string.IsNullOrEmpty(<#=FCode#>condition.<#=model2.Code#>)&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
                query = query.Where(q => q.<#=queryCode#>.Contains(<#=FCode#>condition.<#=model2.Code#>));
		<#}else{#>
			if (<#=FCode#>condition.<#=model2.Code#>.HasValue&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
                query = query.Where(q => q.<#=queryCode#>.Contains(condition.<#=model2.Code#>.Value));
<#}} else if(model2.Search == EnumSearchType.In){#>
			if (<#=FCode#>condition.<#=model2.Code#>s != null && <#=FCode#>condition.<#=model2.Code#>s.Any()&& (!IsAuth||IsAuth&&<#=FCode#>FieldInfo!=null&&<#=FCode#>FieldInfo.IsSearch("<#=model2.Code#>")))
<#if(model2.IsNull){#>
                query = query.Where(q =>q.<#=queryCode#>!=null&&<#=FCode#>condition.<#=model2.Code#>s.Contains((int)q.<#=queryCode#>));
<#}else{#>
				query = query.Where(q => <#=FCode#>condition.<#=model2.Code#>s.Contains(q.<#=queryCode#>));
<#}}}#>
					}
<#}}}}#>

			#endregion

			return query;
		}
	}
}